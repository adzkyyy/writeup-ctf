

# This file was *autogenerated* from the file a.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0x9d2c5680 = Integer(0x9d2c5680); _sage_const_0xefc60000 = Integer(0xefc60000); _sage_const_18 = Integer(18); _sage_const_15 = Integer(15); _sage_const_7 = Integer(7); _sage_const_11 = Integer(11); _sage_const_0 = Integer(0); _sage_const_32 = Integer(32); _sage_const_6 = Integer(6); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_4 = Integer(4); _sage_const_5 = Integer(5); _sage_const_18924 = Integer(18924); _sage_const_104 = Integer(104); _sage_const_16 = Integer(16); _sage_const_160 = Integer(160); _sage_const_0xFFFFFFFF = Integer(0xFFFFFFFF); _sage_const_624 = Integer(624)
import random
from sage.all import *
from pwn import *
from Crypto.Util.number import GCD, long_to_bytes
from hashlib import sha256

TemperingMaskB = _sage_const_0x9d2c5680 
TemperingMaskC = _sage_const_0xefc60000 

def untemper(y):
    y = undoTemperShiftL(y)
    y = undoTemperShiftT(y)
    y = undoTemperShiftS(y)
    y = undoTemperShiftU(y)
    return y

def undoTemperShiftL(y):
    last14 = y >> _sage_const_18 
    final = y ** last14
    return final

def undoTemperShiftT(y):
    first17 = y << _sage_const_15 
    final = y ** (first17 & TemperingMaskC)
    return final

def undoTemperShiftS(y):
    a = y << _sage_const_7 
    b = y ** (a & TemperingMaskB)
    c = b << _sage_const_7 
    d = y ** (c & TemperingMaskB)
    e = d << _sage_const_7 
    f = y ** (e & TemperingMaskB)
    g = f << _sage_const_7 
    h = y ** (g & TemperingMaskB)
    i = h << _sage_const_7 
    final = y ** (i & TemperingMaskB)
    return final

def undoTemperShiftU(y):
    a = y >> _sage_const_11 
    b = y ** a
    c = b >> _sage_const_11 
    final = y ** c
    return final

def gcd(a,b): return a.monic() if b == _sage_const_0  else gcd(b, a%b)

def attacc(n, e, pad1, pad2, ct1, ct2):
    R = Zmod(n)['X']; (X,) = R._first_ngens(1)
    f1 = (X - pad1) ** e - ct1
    f2 = (X - pad2) ** e - ct2
    return -gcd(f1, f2).coefficients()[_sage_const_0 ]

def randoms(rand):
    randbits = [rand.getrandbits(_sage_const_32 ) << _sage_const_32  * i for i in reversed(range(_sage_const_0 , _sage_const_6 ))]
    return randbits[_sage_const_0 ] | randbits[_sage_const_1 ] | randbits[_sage_const_2 ] | randbits[_sage_const_3 ] | randbits[_sage_const_4 ] | randbits[_sage_const_5 ]

p = remote('103.185.38.238',_sage_const_18924 )
ct = []

random_output = []

for i in range(_sage_const_104 ):
    p.recvuntil(b"> ")
    p.sendline(b"1")
    p.recvuntil(b": ")
    j = int(p.recvuntil(b"\n")[:-_sage_const_1 ].decode('utf-8'), _sage_const_16 )
    random_output.append(int(j >> _sage_const_160 ))
    for k in range(_sage_const_4 , _sage_const_0 , -_sage_const_1 ):
        random_output.append(int((j >> (_sage_const_32  * k)) & _sage_const_0xFFFFFFFF ))
    random_output.append(int(j & _sage_const_0xFFFFFFFF ))

rand = random.Random()
recovered_state = (_sage_const_3 , tuple([ untemper(v) for v in random_output[:_sage_const_624 ] ] + [_sage_const_0 ]), None)
rand.setstate(recovered_state)

for i in range(_sage_const_624 ):
        assert random_output[i] == rand.getrandbits(_sage_const_32 )

pad1 = int(sha256(long_to_bytes(randoms(rand))).hexdigest(), _sage_const_16 )
pad2 = int(sha256(long_to_bytes(randoms(rand))).hexdigest(), _sage_const_16 )

p.recvuntil(b"> ")
p.sendline(b"2")

p.recvuntil(b"e: ")
e = int(p.recvuntil(b"\n")[:-_sage_const_1 ], _sage_const_16 )
print("e: " + hex(e))
p.recvuntil(b"N: ")
N = int(p.recvuntil(b"\n")[:-_sage_const_1 ], _sage_const_16 )
print("N: " + hex(N) + "\n")

p.recvuntil(b"Your encrypted flag is: ")
ct.append(int(p.recvuntil(b"\n")[:-_sage_const_1 ], _sage_const_16 ))
print("ct_1: " + hex(ct[len(ct) - _sage_const_1 ]))

p.recvuntil(b"> ")
p.sendline(b"2")
p.recvuntil(b"Your encrypted flag is: ")
ct.append(int(p.recvuntil(b"\n")[:-_sage_const_1 ], _sage_const_16 ))
print("ct_2: " + hex(ct[len(ct) - _sage_const_1 ]))

print(attac(N,e,pad1,pad2,ct[_sage_const_0 ],ct[_sage_const_1 ]))
#f = open('out', 'w')
#f.writelines([str(j) + "=" + str(i) + "\n" for j,i in zip(["n", "e", "pad1", "pad2", "ct1", "ct2"], [N,e,pad1,pad2,ct[0],ct[1]])])

p.close()

